# Chrome拡張機能開発 - Cursor Rules

## プロジェクト概要
このプロジェクトは、Chrome拡張機能を使用してブラウザ内の動画を検出・ダウンロードする機能を提供します。

## アーキテクチャ

### ファイル構造
```
downloader/
├── src/
│   ├── background.ts      # バックグラウンドスクリプト（サービスワーカー）
│   ├── content.ts         # コンテンツスクリプト（動画検出）
│   ├── popup.ts           # ポップアップスクリプト（UI制御）
│   ├── popup.html         # ポップアップUI
│   └── manifest.json      # 拡張機能マニフェスト
├── dist/                  # ビルド出力ディレクトリ
├── webpack.config.js      # Webpack設定
└── tsconfig.json          # TypeScript設定
```

### コンポーネント説明

#### 1. Content Script (content.ts)
- **役割**: ページ内の動画要素を検出
- **機能**:
  - `<video>`要素の検出
  - `<source>`要素の検出
  - `<iframe>`要素（埋め込み動画）の検出
  - DOM変更の監視（MutationObserver）
  - バックグラウンドスクリプトとの通信

#### 2. Background Script (background.ts)
- **役割**: 拡張機能のメインロジック
- **機能**:
  - 動画情報の管理
  - ダウンロード処理
  - タブ管理
  - コンテンツスクリプトとの通信

#### 3. Popup (popup.ts + popup.html)
- **役割**: ユーザーインターフェース
- **機能**:
  - 動画一覧の表示
  - ダウンロード操作
  - 検索・クリア機能

## 開発ガイドライン

### TypeScript
- 厳密な型チェックを有効にする
- Chrome APIの型定義は `declare const chrome: any;` を使用
- インターフェースを定義してデータ構造を明確にする

### ビルド確認ルール
**コード修正時**:
- 修正後に必ずビルドを実行して成功することを確認: `npm run build`
- 修正後に必ずテストを実行してすべて成功することを確認: `npm run test:all`
- ビルドエラーやテストエラーが発生した場合は、TypeScriptエラーやテスト失敗を修正してから次の作業に進む
- テストファイル（`.test.ts`, `.spec.ts`）はビルド対象から除外されているため、テスト専用のコードは自由に記述可能

**コード追加時**:
- 新機能追加後は必ずビルドを実行
- 新機能追加後は必ずテストを実行し、すべて成功することを確認
- 未使用の変数・関数・型は削除する
- 型エラーやテスト失敗は即座に修正する

### 通信パターン
```typescript
// Content Script → Background Script
chrome.runtime.sendMessage({
    action: 'updateVideos',
    videos: videoArray
});

// Popup → Background Script
chrome.runtime.sendMessage({
    action: 'getVideos'
}, (response) => {
    // レスポンス処理
});

// Background Script → Content Script
chrome.tabs.sendMessage(tabId, {
    action: 'refreshVideos'
});
```

### エラーハンドリング
- すべての非同期処理でtry-catchを使用
- ユーザーフレンドリーなエラーメッセージを表示
- Chrome APIのエラーを適切に処理

### UI/UX設計
- モダンで直感的なデザイン
- ローディング状態の表示
- 成功・エラー状態のフィードバック
- レスポンシブなレイアウト

### テスト駆動開発
- 新機能追加時は先にテストケースを作成
- バグ修正時は再現テストケースを追加
- テストカバレッジを80%以上に維持
- テスト実行は `npm run test:all` で確認

## セキュリティ考慮事項

### 権限
- 必要最小限の権限のみを要求
- `activeTab`: アクティブなタブのみアクセス
- `downloads`: ファイルダウンロード機能
- `storage`: 設定の保存
- `scripting`: コンテンツスクリプトの実行

### データ処理
- ユーザーデータの暗号化
- 安全なファイル名生成
- XSS対策（HTMLエスケープ）

## テスト・品質保証

### テスト環境
- **ユニットテスト**: Vitest + jsdom
- **E2Eテスト**: Playwright
- **テスト実行**: `npm run test:all` (ユニット + E2E)

### テスト実行ルール
**コード修正時**:
- 修正後に必ずテストを実行して通ることを確認
- ユニットテスト: `npm run test:run`
- E2Eテスト: `npm run test:e2e`
- 全テスト: `npm run test:all`

**コード追加時**:
- 追加した機能に対応するテストケースを作成
- ユニットテスト: `src/**/*.test.ts` または `src/**/*.spec.ts`
- E2Eテスト: `tests/e2e/*.spec.ts`
- テストカバレッジの確認: `npm run test:coverage`

### テストファイル命名規則
- ユニットテスト: `{ファイル名}.test.ts` または `{ファイル名}.spec.ts`
- E2Eテスト: `tests/e2e/{機能名}.spec.ts`

### テスト作成ガイドライン
```typescript
// ユニットテスト例
import { describe, it, expect, beforeEach } from 'vitest';

describe('機能名', () => {
  beforeEach(() => {
    // セットアップ
  });

  it('正常なケース', () => {
    // テスト実装
    expect(result).toBe(expected);
  });

  it('エラーケース', () => {
    // エラーテスト
    expect(() => function()).toThrow();
  });
});
```

### デバッグ・テスト

### Chrome DevTools
- バックグラウンドスクリプト: `chrome://inspect/#extensions`
- コンテンツスクリプト: ページのDevTools
- ポップアップ: ポップアップを右クリック → 検証

### ログ出力
```typescript
console.log('Debug info:', data);
console.error('Error occurred:', error);
```

## パフォーマンス最適化

### 動画検出
- 定期的な再検出（5秒間隔）
- DOM変更の監視（MutationObserver）
- 重複検出の回避

### メモリ管理
- 不要なイベントリスナーの削除
- 大きなデータの適切な処理
- タブ切り替え時のクリーンアップ

## 拡張機能の配布

### ビルド
```bash
npm run build  # 本番用ビルド
npm run dev    # 開発用ビルド（監視モード）
```

### パッケージング
- `dist/`ディレクトリをZIP化
- Chrome Web Storeにアップロード

## トラブルシューティング

### よくある問題
1. **動画が検出されない**
   - コンテンツスクリプトが正しく読み込まれているか確認
   - ページの読み込み完了を待つ

2. **ダウンロードが失敗する**
   - CORS設定を確認
   - ファイルURLの有効性を確認

3. **ポップアップが表示されない**
   - manifest.jsonの設定を確認
   - ファイルパスが正しいか確認

### デバッグ手順
1. 拡張機能を再読み込み
2. ブラウザのコンソールを確認
3. ネットワークタブでリクエストを確認
4. 拡張機能の権限を確認

### テスト関連の問題
1. **テストが失敗する**
   - テスト環境のセットアップを確認: `npm install`
   - テストファイルの構文エラーを確認
   - モックやスタブの設定を確認

2. **E2Eテストが不安定**
   - ブラウザの起動を確認
   - セレクターの変更を確認
   - タイムアウト設定を調整

3. **テストカバレッジが低い**
   - 未テストの機能を特定: `npm run test:coverage`
   - エッジケースのテストケースを追加
   - 異常系のテストケースを追加

## 🚨 現状の課題と改善点

### 優先度：高 🔴

#### 1. テストカバレッジの問題（対応済み）
- 2024年6月、ユニットテストの追加・修正により解決済み。

#### 2. セキュリティの課題
- **現状**: CORS対応が不完全（`security.ts`でプロキシサービスを使用しないとコメント）
- **課題**:
  - CORSエラーの適切な処理が不十分
  - セキュリティヘッダーの検証機能が不足
- **改善策**:
  - CORSエラーの適切な処理とユーザーへの通知
  - 危険なURLの検出とブロック機能
  - セキュリティヘッダーの検証機能追加

#### 3. エラーハンドリングの改善
- **現状**: 一部のエラー処理が不十分
- **課題**:
  - エラーメッセージが技術的すぎる
  - エラーの分類が不十分
- **改善策**:
  - より詳細でユーザーフレンドリーなエラーメッセージ
  - エラーの分類と適切な対応
  - エラー状態の可視化

### 優先度：中 🟡

#### 4. パフォーマンスの最適化
- **現状**: 動画検出の頻度制御が基本的な実装
- **課題**:
  - メモリ使用量の最適化が不十分
  - 重複検出アルゴリズムの改善が必要
- **改善策**:
  - より高度なパフォーマンス監視
  - メモリ使用量の最適化
  - 重複検出アルゴリズムの改善

#### 5. UI/UXの改善
- **現状**: ポップアップのレスポンシブ対応が不十分
- **課題**:
  - モバイル対応の改善が必要
  - ダウンロード進捗の可視化が不十分
- **改善策**:
  - モバイル対応の改善
  - ダウンロード進捗の可視化
  - より直感的な操作感

#### 6. コード品質の向上
- **現状**: 一部の関数が長すぎる（`background.ts`の491行）
- **課題**:
  - 関数の分割とモジュール化が必要
  - 型定義の強化が必要
- **改善策**:
  - 関数の分割とモジュール化
  - 型定義の強化
  - コメントの充実

### 優先度：低 🟢

#### 7. 機能の拡張
- **現状**: 基本的な動画検出のみ
- **改善策**:
  - より多くの動画プラットフォーム対応
  - 動画品質の自動選択
  - バッチダウンロード機能

#### 8. 開発環境の改善
- **現状**: 依存関係の競合がある
- **改善策**:
  - パッケージバージョンの統一
  - 開発ツールの最適化
  - CI/CDパイプラインの構築

#### 9. ドキュメントの充実
- **現状**: APIドキュメントが不足
- **改善策**:
  - JSDocコメントの追加
  - API仕様書の作成
  - 開発者向けガイドの充実

#### 10. 国際化対応
- **現状**: 日本語のみ対応
- **改善策**:
  - 多言語対応（英語、中国語など）
  - 地域別の動画プラットフォーム対応

## 📋 改善ロードマップ

### Phase 1: 品質保証の強化（最優先）
1. テストカバレッジの向上
2. 依存関係の競合解決
3. セキュリティ強化

### Phase 2: ユーザビリティ向上
1. エラーハンドリングの改善
2. UI/UXの改善
3. パフォーマンス最適化

### Phase 3: 機能拡張
1. 新機能の追加
2. 国際化対応
3. 開発環境の改善

## 🔧 改善作業の進め方

### 作業開始前の確認事項
1. 現在のテストが通ることを確認: `npm run test:all`
2. 改善対象の課題を明確化
3. 影響範囲の調査
4. テストケースの準備

### 作業完了後の確認事項
1. テストの実行: `npm run test:all`
2. 手動テストの実施
3. ドキュメントの更新
4. 課題の進捗更新 