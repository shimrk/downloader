# Chrome拡張機能開発 - Cursor Rules

## プロジェクト概要
このプロジェクトは、Chrome拡張機能を使用してブラウザ内の動画を検出・ダウンロードする機能を提供します。

## アーキテクチャ

### ファイル構造
```
downloader/
├── src/
│   ├── background.ts      # バックグラウンドスクリプト（サービスワーカー）
│   ├── content.ts         # コンテンツスクリプト（動画検出）
│   ├── popup.ts           # ポップアップスクリプト（UI制御）
│   ├── popup.html         # ポップアップUI
│   └── manifest.json      # 拡張機能マニフェスト
├── dist/                  # ビルド出力ディレクトリ
├── webpack.config.js      # Webpack設定
└── tsconfig.json          # TypeScript設定
```

### コンポーネント説明

#### 1. Content Script (content.ts)
- **役割**: ページ内の動画要素を検出
- **機能**:
  - `<video>`要素の検出
  - `<source>`要素の検出
  - `<iframe>`要素（埋め込み動画）の検出
  - DOM変更の監視（MutationObserver）
  - バックグラウンドスクリプトとの通信

#### 2. Background Script (background.ts)
- **役割**: 拡張機能のメインロジック
- **機能**:
  - 動画情報の管理
  - ダウンロード処理
  - タブ管理
  - コンテンツスクリプトとの通信

#### 3. Popup (popup.ts + popup.html)
- **役割**: ユーザーインターフェース
- **機能**:
  - 動画一覧の表示
  - ダウンロード操作
  - 検索・クリア機能

## 開発ガイドライン

### TypeScript
- 厳密な型チェックを有効にする
- Chrome APIの型定義は `declare const chrome: any;` を使用
- インターフェースを定義してデータ構造を明確にする

### 通信パターン
```typescript
// Content Script → Background Script
chrome.runtime.sendMessage({
    action: 'updateVideos',
    videos: videoArray
});

// Popup → Background Script
chrome.runtime.sendMessage({
    action: 'getVideos'
}, (response) => {
    // レスポンス処理
});

// Background Script → Content Script
chrome.tabs.sendMessage(tabId, {
    action: 'refreshVideos'
});
```

### エラーハンドリング
- すべての非同期処理でtry-catchを使用
- ユーザーフレンドリーなエラーメッセージを表示
- Chrome APIのエラーを適切に処理

### UI/UX設計
- モダンで直感的なデザイン
- ローディング状態の表示
- 成功・エラー状態のフィードバック
- レスポンシブなレイアウト

### テスト駆動開発
- 新機能追加時は先にテストケースを作成
- バグ修正時は再現テストケースを追加
- テストカバレッジを80%以上に維持
- テスト実行は `npm run test:all` で確認

## セキュリティ考慮事項

### 権限
- 必要最小限の権限のみを要求
- `activeTab`: アクティブなタブのみアクセス
- `downloads`: ファイルダウンロード機能
- `storage`: 設定の保存
- `scripting`: コンテンツスクリプトの実行

### データ処理
- ユーザーデータの暗号化
- 安全なファイル名生成
- XSS対策（HTMLエスケープ）

## テスト・品質保証

### テスト環境
- **ユニットテスト**: Vitest + jsdom
- **E2Eテスト**: Playwright
- **テスト実行**: `npm run test:all` (ユニット + E2E)

### テスト実行ルール
**コード修正時**:
- 修正後に必ずテストを実行して通ることを確認
- ユニットテスト: `npm run test:run`
- E2Eテスト: `npm run test:e2e`
- 全テスト: `npm run test:all`

**コード追加時**:
- 追加した機能に対応するテストケースを作成
- ユニットテスト: `src/**/*.test.ts` または `src/**/*.spec.ts`
- E2Eテスト: `tests/e2e/*.spec.ts`
- テストカバレッジの確認: `npm run test:coverage`

### テストファイル命名規則
- ユニットテスト: `{ファイル名}.test.ts` または `{ファイル名}.spec.ts`
- E2Eテスト: `tests/e2e/{機能名}.spec.ts`

### テスト作成ガイドライン
```typescript
// ユニットテスト例
import { describe, it, expect, beforeEach } from 'vitest';

describe('機能名', () => {
  beforeEach(() => {
    // セットアップ
  });

  it('正常なケース', () => {
    // テスト実装
    expect(result).toBe(expected);
  });

  it('エラーケース', () => {
    // エラーテスト
    expect(() => function()).toThrow();
  });
});
```

### デバッグ・テスト

### Chrome DevTools
- バックグラウンドスクリプト: `chrome://inspect/#extensions`
- コンテンツスクリプト: ページのDevTools
- ポップアップ: ポップアップを右クリック → 検証

### ログ出力
```typescript
console.log('Debug info:', data);
console.error('Error occurred:', error);
```

## パフォーマンス最適化

### 動画検出
- 定期的な再検出（5秒間隔）
- DOM変更の監視（MutationObserver）
- 重複検出の回避

### メモリ管理
- 不要なイベントリスナーの削除
- 大きなデータの適切な処理
- タブ切り替え時のクリーンアップ

## 拡張機能の配布

### ビルド
```bash
npm run build  # 本番用ビルド
npm run dev    # 開発用ビルド（監視モード）
```

### パッケージング
- `dist/`ディレクトリをZIP化
- Chrome Web Storeにアップロード

## トラブルシューティング

### よくある問題
1. **動画が検出されない**
   - コンテンツスクリプトが正しく読み込まれているか確認
   - ページの読み込み完了を待つ

2. **ダウンロードが失敗する**
   - CORS設定を確認
   - ファイルURLの有効性を確認

3. **ポップアップが表示されない**
   - manifest.jsonの設定を確認
   - ファイルパスが正しいか確認

### デバッグ手順
1. 拡張機能を再読み込み
2. ブラウザのコンソールを確認
3. ネットワークタブでリクエストを確認
4. 拡張機能の権限を確認

### テスト関連の問題
1. **テストが失敗する**
   - テスト環境のセットアップを確認: `npm install`
   - テストファイルの構文エラーを確認
   - モックやスタブの設定を確認

2. **E2Eテストが不安定**
   - ブラウザの起動を確認
   - セレクターの変更を確認
   - タイムアウト設定を調整

3. **テストカバレッジが低い**
   - 未テストの機能を特定: `npm run test:coverage`
   - エッジケースのテストケースを追加
   - 異常系のテストケースを追加 