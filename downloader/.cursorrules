# テストに関する重要な指針

- テストケースは正しい観点で行い、テストに通らないことは実装側に不備があることを認識すること。
- テストを通すこと自体を目的とせず、仕様や要件に基づいた観点でテストを作成・修正すること。
- タイムアウト延長でごまかさず、実装側の問題を修正すること。
- 基本的にタイムアウトは5000msで十分であり、不用意な延長は禁止。
- テストの失敗は必ず原因を特定し、実装またはテストのどちらに問題があるかを明確にすること。

# TDD（Test-Driven Development）開発方針

## 基本原則
- **テストファースト**: 新機能追加時は必ずテストを先に書く
- **Red-Green-Refactorサイクル**: 失敗するテスト → 最小限の実装 → リファクタリングの順序で開発
- **設計検証型テスト**: 実装の詳細ではなく、期待する動作を検証するテストを作成

## 開発ワークフロー

### 新機能開発時
1. **Red**: 失敗するテストを先に書く
   ```typescript
   describe('新機能', () => {
     it('should perform expected behavior', () => {
       // 期待する動作を明確化
       const result = newFeature();
       expect(result).toBe(expectedValue);
     });
   });
   ```

2. **Green**: 最小限の実装でテストを通す
   - テストが通る最小限のコードを書く
   - 実装の詳細は後で改善する

3. **Refactor**: テストが保護されている状態でリファクタリング
   - コードの重複を除去
   - 可読性を向上
   - パフォーマンスを改善

### バグ修正時
1. **再現テスト**: バグを再現するテストケースを作成
2. **修正**: バグを修正してテストを通す
3. **リファクタリング**: 必要に応じてコードを改善

### リファクタリング時
1. **既存テストの確認**: 既存のテストが十分に保護しているか確認
2. **リファクタリング実行**: テストが通ることを確認しながら改善
3. **テストの追加**: 必要に応じてテストケースを追加

## テスト作成ガイドライン

### テストの構造
```typescript
describe('機能名', () => {
  describe('正常系', () => {
    it('should work with valid input', () => {
      // 正常なケースのテスト
    });
  });

  describe('異常系', () => {
    it('should handle invalid input', () => {
      // エラーケースのテスト
    });
  });

  describe('エッジケース', () => {
    it('should handle boundary conditions', () => {
      // 境界値のテスト
    });
  });
});
```

### テストデータの管理
```typescript
// テストデータのファクトリ関数を作成
const createTestData = (overrides: Partial<TestData> = {}): TestData => ({
  // デフォルト値
  ...overrides
});
```

### モックの使用方針
- 外部依存（Chrome API等）は適切にモック化
- モックはテストの意図を明確にする
- 過度なモックは避け、実際の動作に近いテストを心がける

## 品質保証ルール

### テスト実行ルール
- **新機能追加時**: 必ずテストファーストで開発し、テストが通ることを確認
- **コード修正時**: 修正後に必ずテストを実行し、既存機能が壊れていないことを確認
- **リファクタリング時**: テストが保護されていることを確認してから実行

### テストカバレッジ
- **目標**: 90%以上のカバレッジを維持
- **測定**: `npm run test:coverage`で定期的に確認
- **改善**: カバレッジが低い場合はテストケースを追加

### テストの品質
- **意図の明確化**: テストが何を検証しているかを明確にする
- **独立性**: テスト間の依存関係を避ける
- **保守性**: テストコードも本番コードと同様に保守しやすくする

## 開発環境の設定

### テスト実行コマンド
```bash
npm run test:watch    # 開発時の監視モード
npm run test:run      # テスト実行
npm run test:coverage # カバレッジ測定
npm run test:all      # 全テスト実行（ユニット + E2E）
```

### IDE設定
- テストファイルの自動実行を有効化
- テスト結果の可視化
- カバレッジの表示

## 成功指標

### 短期指標（1ヶ月）
- 新機能開発でのTDD適用率: 100%
- テスト実行時間: 5秒以内
- テストカバレッジ: 90%以上

### 長期指標（3ヶ月）
- バグ発生率: 50%削減
- 開発速度: 20%向上
- コード品質スコア: 向上

## トラブルシューティング

### よくある問題と対策
1. **テストが書けない**: 設計を見直し、テスト可能な構造にする
2. **テストが複雑**: テスト対象を小さく分割する
3. **テストが不安定**: テストの独立性を確認し、モックを適切に設定する

### 継続的改善
- 定期的にTDDの効果を評価
- チーム内でのベストプラクティス共有
- ツールやプロセスの改善 