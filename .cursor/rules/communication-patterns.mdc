# 通信パターンとエラーハンドリング

## 通信パターン

### Content Script → Background Script
```typescript
chrome.runtime.sendMessage({
    action: 'updateVideos',
    videos: videoArray
});
```

### Popup → Background Script
```typescript
chrome.runtime.sendMessage({
    action: 'getVideos'
}, (response) => {
    // レスポンス処理
});
```

### Background Script → Content Script
```typescript
chrome.tabs.sendMessage(tabId, {
    action: 'refreshVideos'
});
```

## エラーハンドリング

### 基本原則
- すべての非同期処理でtry-catchを使用
- ユーザーフレンドリーなエラーメッセージを表示
- Chrome APIのエラーを適切に処理

### エラーハンドリングの実装例
```typescript
try {
    const result = await someAsyncOperation();
    return result;
} catch (error) {
    console.error('エラーが発生しました:', error);
    // ユーザーフレンドリーなエラーメッセージを表示
    showErrorMessage('操作に失敗しました。もう一度お試しください。');
    throw error;
}
```

### Chrome API エラーハンドリング
```typescript
chrome.runtime.sendMessage(message, (response) => {
    if (chrome.runtime.lastError) {
        console.error('Chrome API エラー:', chrome.runtime.lastError);
        // エラー処理
        return;
    }
    // 正常処理
});
```

## デバッグ方針

### ログ出力
```typescript
// デバッグ用ログ（開発時のみ表示）
console.debug('Debug info:', data);

// 通常のログ
console.log('Info:', data);

// エラーログ
console.error('Error occurred:', error);
```

### デバッグ方針
- **デバッグ用ログは必ず`console.debug`を使用**し、通常のログと区別する
- **問題調査時は必要な観点を一度にログ追加**し、都度ログを仕込む非効率な作業を避ける
- 原因が特定できた段階でログ追加を停止し、修正に取り組む
- 不要なログ追加は避け、効率的な問題解決を心がける

### Chrome DevTools
- バックグラウンドスクリプト: `chrome://inspect/#extensions`
- コンテンツスクリプト: ページのDevTools
- ポップアップ: ポップアップを右クリック → 検証
